Terminals unused in grammar

   ROOT
   TOK_BOOL
   TOK_CHAR
   TOK_FALSE
   TOK_TRUE
   TOK_ROOT
   TOK_DECLID
   TOK_INDEX
   TOK_POS
   TOK_NEG
   TOK_CALL
   TOK_NEWARRAY
   TOK_NEWSTRING
   TOK_IFELSE
   TOK_RETURNVOID
   TOK_BLOCK
   TOK_VARDECL
   TOK_FUNCTION
   TOK_PARAMLIST
   TOK_PROTOTYPE
   '%'


Rules useless in parser due to conflicts

   70 variable: TOK_IDENT


State 3 conflicts: 17 reduce/reduce
State 49 conflicts: 13 shift/reduce
State 50 conflicts: 13 shift/reduce
State 54 conflicts: 13 shift/reduce
State 55 conflicts: 13 shift/reduce
State 126 conflicts: 24 reduce/reduce
State 128 conflicts: 24 reduce/reduce
State 132 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program structde
    2        | program func
    3        | program stmt
    4        | /* empty */

    5 structde: TOK_STRUCT TOK_IDENT '{' '}'
    6         | TOK_STRUCT TOK_IDENT s_stmts '}'

    7 s_stmts: '{' fielddec ';'
    8        | s_stmts fielddec ';'

    9 fielddec: basetype TOK_IDENT
   10         | basetype TOK_ARRAY TOK_IDENT

   11 basetype: TOK_VOID
   12         | TOK_INT
   13         | TOK_STRING
   14         | TOK_TYPEID

   15 func: identdec '(' ')' block
   16     | identdec '(' ')' ';'
   17     | identdec paramli ')' ';'
   18     | identdec paramli ')' block

   19 paramli: paramli ',' identdec
   20        | '(' identdec

   21 identdec: basetype TOK_IDENT
   22         | basetype TOK_ARRAY TOK_IDENT

   23 block: ';'
   24      | '{' '}'
   25      | b_stmts '}'

   26 b_stmts: '{' stmt
   27        | b_stmts stmt

   28 stmt: block
   29     | vardecl
   30     | while
   31     | ifelse
   32     | return
   33     | expr ';'

   34 vardecl: identdec '=' expr ';'

   35 while: TOK_WHILE '(' expr ')' stmt

   36 ifelse: TOK_IF '(' expr ')' stmt
   37       | TOK_IF '(' expr ')' stmt TOK_ELSE stmt

   38 return: TOK_RETURN expr ';'
   39       | TOK_RETURN ';'

   40 expr: TOK_CHR expr
   41     | TOK_ORD expr
   42     | expr TOK_EQ expr
   43     | expr TOK_NE expr
   44     | expr TOK_LT expr
   45     | expr TOK_GT expr
   46     | expr TOK_LE expr
   47     | expr TOK_GE expr
   48     | '!' expr
   49     | expr '=' expr
   50     | expr '+' expr
   51     | expr '-' expr
   52     | expr '*' expr
   53     | expr '/' expr
   54     | '+' expr
   55     | '-' expr
   56     | '(' expr ')'
   57     | TOK_IDENT
   58     | NUMBER
   59     | allocator
   60     | call
   61     | variable
   62     | constant

   63 allocator: TOK_NEW TOK_IDENT '(' ')'
   64          | TOK_NEW TOK_STRING '(' expr ')'
   65          | TOK_NEW basetype '[' expr ']'

   66 call: TOK_IDENT '(' ')'
   67     | c_args ')'

   68 c_args: TOK_IDENT '(' expr
   69       | c_args ',' expr

   70 variable: TOK_IDENT
   71         | expr '[' expr ']'
   72         | expr '.' TOK_FIELD

   73 constant: TOK_INTCON
   74         | TOK_CHARCON
   75         | TOK_STRINGCON
   76         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 48
'%' (37)
'(' (40) 15 16 20 35 36 37 56 63 64 66 68
')' (41) 15 16 17 18 35 36 37 56 63 64 66 67
'*' (42) 52
'+' (43) 50 54
',' (44) 19 69
'-' (45) 51 55
'.' (46) 72
'/' (47) 53
';' (59) 7 8 16 17 23 33 34 38 39
'=' (61) 34 49
'[' (91) 65 71
']' (93) 65 71
'{' (123) 5 7 24 26
'}' (125) 5 6 24 25
error (256)
ROOT (258)
TOK_IDENT (259) 5 6 9 10 21 22 57 63 66 68 70
NUMBER (260) 58
TOK_VOID (261) 11
TOK_BOOL (262)
TOK_CHAR (263)
TOK_INT (264) 12
TOK_STRING (265) 13 64
TOK_RETURN (266) 38 39
TOK_IF (267) 36 37
TOK_ELSE (268) 37
TOK_WHILE (269) 35
TOK_FALSE (270)
TOK_TRUE (271)
TOK_NULL (272) 76
TOK_EQ (273) 42
TOK_LT (274) 44
TOK_GT (275) 45
TOK_GE (276) 47
TOK_LE (277) 46
TOK_NE (278) 43
TOK_INTCON (279) 73
TOK_CHARCON (280) 74
TOK_STRINGCON (281) 75
TOK_STRUCT (282) 5 6
TOK_ORD (283) 41
TOK_CHR (284) 40
TOK_ARRAY (285) 10 22
TOK_NEW (286) 63 64 65
TOK_ROOT (287)
TOK_FIELD (288) 72
TOK_DECLID (289)
TOK_TYPEID (290) 14
TOK_INDEX (291)
TOK_POS (292)
TOK_NEG (293)
TOK_CALL (294)
TOK_NEWARRAY (295)
TOK_NEWSTRING (296)
TOK_IFELSE (297)
TOK_RETURNVOID (298)
TOK_BLOCK (299)
TOK_VARDECL (300)
TOK_FUNCTION (301)
TOK_PARAMLIST (302)
TOK_PROTOTYPE (303)
POS (304)
NEG (305)


Nonterminals, with rules where they appear

$accept (67)
    on left: 0
program (68)
    on left: 1 2 3 4, on right: 0 1 2 3
structde (69)
    on left: 5 6, on right: 1
s_stmts (70)
    on left: 7 8, on right: 6 8
fielddec (71)
    on left: 9 10, on right: 7 8
basetype (72)
    on left: 11 12 13 14, on right: 9 10 21 22 65
func (73)
    on left: 15 16 17 18, on right: 2
paramli (74)
    on left: 19 20, on right: 17 18 19
identdec (75)
    on left: 21 22, on right: 15 16 17 18 19 20 34
block (76)
    on left: 23 24 25, on right: 15 18 28
b_stmts (77)
    on left: 26 27, on right: 25 27
stmt (78)
    on left: 28 29 30 31 32 33, on right: 3 26 27 35 36 37
vardecl (79)
    on left: 34, on right: 29
while (80)
    on left: 35, on right: 30
ifelse (81)
    on left: 36 37, on right: 31
return (82)
    on left: 38 39, on right: 32
expr (83)
    on left: 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57
    58 59 60 61 62, on right: 33 34 35 36 37 38 40 41 42 43 44 45 46
    47 48 49 50 51 52 53 54 55 56 64 65 68 69 71 72
allocator (84)
    on left: 63 64 65, on right: 59
call (85)
    on left: 66 67, on right: 60
c_args (86)
    on left: 68 69, on right: 67 69
variable (87)
    on left: 70 71 72, on right: 61
constant (88)
    on left: 73 74 75 76, on right: 62


State 0

    0 $accept: . program $end

    $default  reduce using rule 4 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structde
    2        | program . func
    3        | program . stmt

    $end           shift, and go to state 2
    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_RETURN     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_STRUCT     shift, and go to state 15
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    TOK_TYPEID     shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23
    '{'            shift, and go to state 24
    ';'            shift, and go to state 25

    structde   go to state 26
    basetype   go to state 27
    func       go to state 28
    identdec   go to state 29
    block      go to state 30
    b_stmts    go to state 31
    stmt       go to state 32
    vardecl    go to state 33
    while      go to state 34
    ifelse     go to state 35
    return     go to state 36
    expr       go to state 37
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 2

    0 $accept: program $end .

    $default  accept


State 3

   57 expr: TOK_IDENT .
   66 call: TOK_IDENT . '(' ')'
   68 c_args: TOK_IDENT . '(' expr
   70 variable: TOK_IDENT .

    '('  shift, and go to state 43

    TOK_EQ    reduce using rule 57 (expr)
    TOK_EQ    [reduce using rule 70 (variable)]
    TOK_LT    reduce using rule 57 (expr)
    TOK_LT    [reduce using rule 70 (variable)]
    TOK_GT    reduce using rule 57 (expr)
    TOK_GT    [reduce using rule 70 (variable)]
    TOK_GE    reduce using rule 57 (expr)
    TOK_GE    [reduce using rule 70 (variable)]
    TOK_LE    reduce using rule 57 (expr)
    TOK_LE    [reduce using rule 70 (variable)]
    TOK_NE    reduce using rule 57 (expr)
    TOK_NE    [reduce using rule 70 (variable)]
    '='       reduce using rule 57 (expr)
    '='       [reduce using rule 70 (variable)]
    '+'       reduce using rule 57 (expr)
    '+'       [reduce using rule 70 (variable)]
    '-'       reduce using rule 57 (expr)
    '-'       [reduce using rule 70 (variable)]
    '*'       reduce using rule 57 (expr)
    '*'       [reduce using rule 70 (variable)]
    '/'       reduce using rule 57 (expr)
    '/'       [reduce using rule 70 (variable)]
    '['       reduce using rule 57 (expr)
    '['       [reduce using rule 70 (variable)]
    '.'       reduce using rule 57 (expr)
    '.'       [reduce using rule 70 (variable)]
    ';'       reduce using rule 57 (expr)
    ';'       [reduce using rule 70 (variable)]
    ')'       reduce using rule 57 (expr)
    ')'       [reduce using rule 70 (variable)]
    ','       reduce using rule 57 (expr)
    ','       [reduce using rule 70 (variable)]
    ']'       reduce using rule 57 (expr)
    ']'       [reduce using rule 70 (variable)]
    $default  reduce using rule 57 (expr)


State 4

   58 expr: NUMBER .

    $default  reduce using rule 58 (expr)


State 5

   11 basetype: TOK_VOID .

    $default  reduce using rule 11 (basetype)


State 6

   12 basetype: TOK_INT .

    $default  reduce using rule 12 (basetype)


State 7

   13 basetype: TOK_STRING .

    $default  reduce using rule 13 (basetype)


State 8

   38 return: TOK_RETURN . expr ';'
   39       | TOK_RETURN . ';'

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23
    ';'            shift, and go to state 44

    expr       go to state 45
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 9

   36 ifelse: TOK_IF . '(' expr ')' stmt
   37       | TOK_IF . '(' expr ')' stmt TOK_ELSE stmt

    '('  shift, and go to state 46


State 10

   35 while: TOK_WHILE . '(' expr ')' stmt

    '('  shift, and go to state 47


State 11

   76 constant: TOK_NULL .

    $default  reduce using rule 76 (constant)


State 12

   73 constant: TOK_INTCON .

    $default  reduce using rule 73 (constant)


State 13

   74 constant: TOK_CHARCON .

    $default  reduce using rule 74 (constant)


State 14

   75 constant: TOK_STRINGCON .

    $default  reduce using rule 75 (constant)


State 15

    5 structde: TOK_STRUCT . TOK_IDENT '{' '}'
    6         | TOK_STRUCT . TOK_IDENT s_stmts '}'

    TOK_IDENT  shift, and go to state 48


State 16

   41 expr: TOK_ORD . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 49
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 17

   40 expr: TOK_CHR . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 50
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 18

   63 allocator: TOK_NEW . TOK_IDENT '(' ')'
   64          | TOK_NEW . TOK_STRING '(' expr ')'
   65          | TOK_NEW . basetype '[' expr ']'

    TOK_IDENT   shift, and go to state 51
    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 52
    TOK_TYPEID  shift, and go to state 19

    basetype  go to state 53


State 19

   14 basetype: TOK_TYPEID .

    $default  reduce using rule 14 (basetype)


State 20

   54 expr: '+' . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 54
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 21

   55 expr: '-' . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 55
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 22

   48 expr: '!' . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 56
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 23

   56 expr: '(' . expr ')'

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 57
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 24

   24 block: '{' . '}'
   26 b_stmts: '{' . stmt

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_RETURN     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    TOK_TYPEID     shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23
    '{'            shift, and go to state 24
    '}'            shift, and go to state 58
    ';'            shift, and go to state 25

    basetype   go to state 27
    identdec   go to state 59
    block      go to state 30
    b_stmts    go to state 31
    stmt       go to state 60
    vardecl    go to state 33
    while      go to state 34
    ifelse     go to state 35
    return     go to state 36
    expr       go to state 37
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 25

   23 block: ';' .

    $default  reduce using rule 23 (block)


State 26

    1 program: program structde .

    $default  reduce using rule 1 (program)


State 27

   21 identdec: basetype . TOK_IDENT
   22         | basetype . TOK_ARRAY TOK_IDENT

    TOK_IDENT  shift, and go to state 61
    TOK_ARRAY  shift, and go to state 62


State 28

    2 program: program func .

    $default  reduce using rule 2 (program)


State 29

   15 func: identdec . '(' ')' block
   16     | identdec . '(' ')' ';'
   17     | identdec . paramli ')' ';'
   18     | identdec . paramli ')' block
   34 vardecl: identdec . '=' expr ';'

    '='  shift, and go to state 63
    '('  shift, and go to state 64

    paramli  go to state 65


State 30

   28 stmt: block .

    $default  reduce using rule 28 (stmt)


State 31

   25 block: b_stmts . '}'
   27 b_stmts: b_stmts . stmt

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_RETURN     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    TOK_TYPEID     shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23
    '{'            shift, and go to state 24
    '}'            shift, and go to state 66
    ';'            shift, and go to state 25

    basetype   go to state 27
    identdec   go to state 59
    block      go to state 30
    b_stmts    go to state 31
    stmt       go to state 67
    vardecl    go to state 33
    while      go to state 34
    ifelse     go to state 35
    return     go to state 36
    expr       go to state 37
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 32

    3 program: program stmt .

    $default  reduce using rule 3 (program)


State 33

   29 stmt: vardecl .

    $default  reduce using rule 29 (stmt)


State 34

   30 stmt: while .

    $default  reduce using rule 30 (stmt)


State 35

   31 stmt: ifelse .

    $default  reduce using rule 31 (stmt)


State 36

   32 stmt: return .

    $default  reduce using rule 32 (stmt)


State 37

   33 stmt: expr . ';'
   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80
    ';'     shift, and go to state 81


State 38

   59 expr: allocator .

    $default  reduce using rule 59 (expr)


State 39

   60 expr: call .

    $default  reduce using rule 60 (expr)


State 40

   67 call: c_args . ')'
   69 c_args: c_args . ',' expr

    ')'  shift, and go to state 82
    ','  shift, and go to state 83


State 41

   61 expr: variable .

    $default  reduce using rule 61 (expr)


State 42

   62 expr: constant .

    $default  reduce using rule 62 (expr)


State 43

   66 call: TOK_IDENT '(' . ')'
   68 c_args: TOK_IDENT '(' . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23
    ')'            shift, and go to state 84

    expr       go to state 85
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 44

   39 return: TOK_RETURN ';' .

    $default  reduce using rule 39 (return)


State 45

   38 return: TOK_RETURN expr . ';'
   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80
    ';'     shift, and go to state 86


State 46

   36 ifelse: TOK_IF '(' . expr ')' stmt
   37       | TOK_IF '(' . expr ')' stmt TOK_ELSE stmt

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 87
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 47

   35 while: TOK_WHILE '(' . expr ')' stmt

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 88
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 48

    5 structde: TOK_STRUCT TOK_IDENT . '{' '}'
    6         | TOK_STRUCT TOK_IDENT . s_stmts '}'

    '{'  shift, and go to state 89

    s_stmts  go to state 90


State 49

   41 expr: TOK_ORD expr .
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80

    TOK_EQ    [reduce using rule 41 (expr)]
    TOK_LT    [reduce using rule 41 (expr)]
    TOK_GT    [reduce using rule 41 (expr)]
    TOK_GE    [reduce using rule 41 (expr)]
    TOK_LE    [reduce using rule 41 (expr)]
    TOK_NE    [reduce using rule 41 (expr)]
    '='       [reduce using rule 41 (expr)]
    '+'       [reduce using rule 41 (expr)]
    '-'       [reduce using rule 41 (expr)]
    '*'       [reduce using rule 41 (expr)]
    '/'       [reduce using rule 41 (expr)]
    '['       [reduce using rule 41 (expr)]
    '.'       [reduce using rule 41 (expr)]
    $default  reduce using rule 41 (expr)


State 50

   40 expr: TOK_CHR expr .
   42     | expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80

    TOK_EQ    [reduce using rule 40 (expr)]
    TOK_LT    [reduce using rule 40 (expr)]
    TOK_GT    [reduce using rule 40 (expr)]
    TOK_GE    [reduce using rule 40 (expr)]
    TOK_LE    [reduce using rule 40 (expr)]
    TOK_NE    [reduce using rule 40 (expr)]
    '='       [reduce using rule 40 (expr)]
    '+'       [reduce using rule 40 (expr)]
    '-'       [reduce using rule 40 (expr)]
    '*'       [reduce using rule 40 (expr)]
    '/'       [reduce using rule 40 (expr)]
    '['       [reduce using rule 40 (expr)]
    '.'       [reduce using rule 40 (expr)]
    $default  reduce using rule 40 (expr)


State 51

   63 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 91


State 52

   13 basetype: TOK_STRING .
   64 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 92

    $default  reduce using rule 13 (basetype)


State 53

   65 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 93


State 54

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | '+' expr .
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80

    TOK_EQ    [reduce using rule 54 (expr)]
    TOK_LT    [reduce using rule 54 (expr)]
    TOK_GT    [reduce using rule 54 (expr)]
    TOK_GE    [reduce using rule 54 (expr)]
    TOK_LE    [reduce using rule 54 (expr)]
    TOK_NE    [reduce using rule 54 (expr)]
    '='       [reduce using rule 54 (expr)]
    '+'       [reduce using rule 54 (expr)]
    '-'       [reduce using rule 54 (expr)]
    '*'       [reduce using rule 54 (expr)]
    '/'       [reduce using rule 54 (expr)]
    '['       [reduce using rule 54 (expr)]
    '.'       [reduce using rule 54 (expr)]
    $default  reduce using rule 54 (expr)


State 55

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   55     | '-' expr .
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80

    TOK_EQ    [reduce using rule 55 (expr)]
    TOK_LT    [reduce using rule 55 (expr)]
    TOK_GT    [reduce using rule 55 (expr)]
    TOK_GE    [reduce using rule 55 (expr)]
    TOK_LE    [reduce using rule 55 (expr)]
    TOK_NE    [reduce using rule 55 (expr)]
    '='       [reduce using rule 55 (expr)]
    '+'       [reduce using rule 55 (expr)]
    '-'       [reduce using rule 55 (expr)]
    '*'       [reduce using rule 55 (expr)]
    '/'       [reduce using rule 55 (expr)]
    '['       [reduce using rule 55 (expr)]
    '.'       [reduce using rule 55 (expr)]
    $default  reduce using rule 55 (expr)


State 56

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   48     | '!' expr .
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 48 (expr)


State 57

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   56     | '(' expr . ')'
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80
    ')'     shift, and go to state 94


State 58

   24 block: '{' '}' .

    $default  reduce using rule 24 (block)


State 59

   34 vardecl: identdec . '=' expr ';'

    '='  shift, and go to state 63


State 60

   26 b_stmts: '{' stmt .

    $default  reduce using rule 26 (b_stmts)


State 61

   21 identdec: basetype TOK_IDENT .

    $default  reduce using rule 21 (identdec)


State 62

   22 identdec: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 95


State 63

   34 vardecl: identdec '=' . expr ';'

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 96
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 64

   15 func: identdec '(' . ')' block
   16     | identdec '(' . ')' ';'
   20 paramli: '(' . identdec

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_TYPEID  shift, and go to state 19
    ')'         shift, and go to state 97

    basetype  go to state 27
    identdec  go to state 98


State 65

   17 func: identdec paramli . ')' ';'
   18     | identdec paramli . ')' block
   19 paramli: paramli . ',' identdec

    ')'  shift, and go to state 99
    ','  shift, and go to state 100


State 66

   25 block: b_stmts '}' .

    $default  reduce using rule 25 (block)


State 67

   27 b_stmts: b_stmts stmt .

    $default  reduce using rule 27 (b_stmts)


State 68

   42 expr: expr TOK_EQ . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 101
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 69

   44 expr: expr TOK_LT . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 102
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 70

   45 expr: expr TOK_GT . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 103
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 71

   47 expr: expr TOK_GE . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 104
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 72

   46 expr: expr TOK_LE . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 105
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 73

   43 expr: expr TOK_NE . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 106
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 74

   49 expr: expr '=' . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 107
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 75

   50 expr: expr '+' . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 108
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 76

   51 expr: expr '-' . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 109
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 77

   52 expr: expr '*' . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 110
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 78

   53 expr: expr '/' . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 111
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 79

   71 variable: expr '[' . expr ']'

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 112
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 80

   72 variable: expr '.' . TOK_FIELD

    TOK_FIELD  shift, and go to state 113


State 81

   33 stmt: expr ';' .

    $default  reduce using rule 33 (stmt)


State 82

   67 call: c_args ')' .

    $default  reduce using rule 67 (call)


State 83

   69 c_args: c_args ',' . expr

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 114
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 84

   66 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 66 (call)


State 85

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   68 c_args: TOK_IDENT '(' expr .
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80

    $default  reduce using rule 68 (c_args)


State 86

   38 return: TOK_RETURN expr ';' .

    $default  reduce using rule 38 (return)


State 87

   36 ifelse: TOK_IF '(' expr . ')' stmt
   37       | TOK_IF '(' expr . ')' stmt TOK_ELSE stmt
   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80
    ')'     shift, and go to state 115


State 88

   35 while: TOK_WHILE '(' expr . ')' stmt
   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80
    ')'     shift, and go to state 116


State 89

    5 structde: TOK_STRUCT TOK_IDENT '{' . '}'
    7 s_stmts: '{' . fielddec ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_TYPEID  shift, and go to state 19
    '}'         shift, and go to state 117

    fielddec  go to state 118
    basetype  go to state 119


State 90

    6 structde: TOK_STRUCT TOK_IDENT s_stmts . '}'
    8 s_stmts: s_stmts . fielddec ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_TYPEID  shift, and go to state 19
    '}'         shift, and go to state 120

    fielddec  go to state 121
    basetype  go to state 119


State 91

   63 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 122


State 92

   64 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 123
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 93

   65 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23

    expr       go to state 124
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 94

   56 expr: '(' expr ')' .

    $default  reduce using rule 56 (expr)


State 95

   22 identdec: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 22 (identdec)


State 96

   34 vardecl: identdec '=' expr . ';'
   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80
    ';'     shift, and go to state 125


State 97

   15 func: identdec '(' ')' . block
   16     | identdec '(' ')' . ';'

    '{'  shift, and go to state 24
    ';'  shift, and go to state 126

    block    go to state 127
    b_stmts  go to state 31


State 98

   20 paramli: '(' identdec .

    $default  reduce using rule 20 (paramli)


State 99

   17 func: identdec paramli ')' . ';'
   18     | identdec paramli ')' . block

    '{'  shift, and go to state 24
    ';'  shift, and go to state 128

    block    go to state 129
    b_stmts  go to state 31


State 100

   19 paramli: paramli ',' . identdec

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_TYPEID  shift, and go to state 19

    basetype  go to state 27
    identdec  go to state 130


State 101

   42 expr: expr . TOK_EQ expr
   42     | expr TOK_EQ expr .
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 42 (expr)


State 102

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   44     | expr TOK_LT expr .
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 44 (expr)


State 103

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   45     | expr TOK_GT expr .
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 45 (expr)


State 104

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   47     | expr TOK_GE expr .
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 47 (expr)


State 105

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   46     | expr TOK_LE expr .
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 46 (expr)


State 106

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   43     | expr TOK_NE expr .
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 43 (expr)


State 107

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   49     | expr '=' expr .
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80

    $default  reduce using rule 49 (expr)


State 108

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   50     | expr '+' expr .
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 50 (expr)


State 109

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   51     | expr '-' expr .
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 51 (expr)


State 110

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   52     | expr '*' expr .
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 52 (expr)


State 111

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   53     | expr '/' expr .
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 53 (expr)


State 112

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   71 variable: expr . '[' expr ']'
   71         | expr '[' expr . ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80
    ']'     shift, and go to state 131


State 113

   72 variable: expr '.' TOK_FIELD .

    $default  reduce using rule 72 (variable)


State 114

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   69 c_args: c_args ',' expr .
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80

    $default  reduce using rule 69 (c_args)


State 115

   36 ifelse: TOK_IF '(' expr ')' . stmt
   37       | TOK_IF '(' expr ')' . stmt TOK_ELSE stmt

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_RETURN     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    TOK_TYPEID     shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23
    '{'            shift, and go to state 24
    ';'            shift, and go to state 25

    basetype   go to state 27
    identdec   go to state 59
    block      go to state 30
    b_stmts    go to state 31
    stmt       go to state 132
    vardecl    go to state 33
    while      go to state 34
    ifelse     go to state 35
    return     go to state 36
    expr       go to state 37
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 116

   35 while: TOK_WHILE '(' expr ')' . stmt

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_RETURN     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    TOK_TYPEID     shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23
    '{'            shift, and go to state 24
    ';'            shift, and go to state 25

    basetype   go to state 27
    identdec   go to state 59
    block      go to state 30
    b_stmts    go to state 31
    stmt       go to state 133
    vardecl    go to state 33
    while      go to state 34
    ifelse     go to state 35
    return     go to state 36
    expr       go to state 37
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 117

    5 structde: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 5 (structde)


State 118

    7 s_stmts: '{' fielddec . ';'

    ';'  shift, and go to state 134


State 119

    9 fielddec: basetype . TOK_IDENT
   10         | basetype . TOK_ARRAY TOK_IDENT

    TOK_IDENT  shift, and go to state 135
    TOK_ARRAY  shift, and go to state 136


State 120

    6 structde: TOK_STRUCT TOK_IDENT s_stmts '}' .

    $default  reduce using rule 6 (structde)


State 121

    8 s_stmts: s_stmts fielddec . ';'

    ';'  shift, and go to state 137


State 122

   63 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 63 (allocator)


State 123

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   64 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80
    ')'     shift, and go to state 138


State 124

   42 expr: expr . TOK_EQ expr
   43     | expr . TOK_NE expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_GT expr
   46     | expr . TOK_LE expr
   47     | expr . TOK_GE expr
   49     | expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   65 allocator: TOK_NEW basetype '[' expr . ']'
   71 variable: expr . '[' expr ']'
   72         | expr . '.' TOK_FIELD

    TOK_EQ  shift, and go to state 68
    TOK_LT  shift, and go to state 69
    TOK_GT  shift, and go to state 70
    TOK_GE  shift, and go to state 71
    TOK_LE  shift, and go to state 72
    TOK_NE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '['     shift, and go to state 79
    '.'     shift, and go to state 80
    ']'     shift, and go to state 139


State 125

   34 vardecl: identdec '=' expr ';' .

    $default  reduce using rule 34 (vardecl)


State 126

   16 func: identdec '(' ')' ';' .
   23 block: ';' .

    $end           reduce using rule 16 (func)
    $end           [reduce using rule 23 (block)]
    TOK_IDENT      reduce using rule 16 (func)
    TOK_IDENT      [reduce using rule 23 (block)]
    NUMBER         reduce using rule 16 (func)
    NUMBER         [reduce using rule 23 (block)]
    TOK_VOID       reduce using rule 16 (func)
    TOK_VOID       [reduce using rule 23 (block)]
    TOK_INT        reduce using rule 16 (func)
    TOK_INT        [reduce using rule 23 (block)]
    TOK_STRING     reduce using rule 16 (func)
    TOK_STRING     [reduce using rule 23 (block)]
    TOK_RETURN     reduce using rule 16 (func)
    TOK_RETURN     [reduce using rule 23 (block)]
    TOK_IF         reduce using rule 16 (func)
    TOK_IF         [reduce using rule 23 (block)]
    TOK_WHILE      reduce using rule 16 (func)
    TOK_WHILE      [reduce using rule 23 (block)]
    TOK_NULL       reduce using rule 16 (func)
    TOK_NULL       [reduce using rule 23 (block)]
    TOK_INTCON     reduce using rule 16 (func)
    TOK_INTCON     [reduce using rule 23 (block)]
    TOK_CHARCON    reduce using rule 16 (func)
    TOK_CHARCON    [reduce using rule 23 (block)]
    TOK_STRINGCON  reduce using rule 16 (func)
    TOK_STRINGCON  [reduce using rule 23 (block)]
    TOK_STRUCT     reduce using rule 16 (func)
    TOK_STRUCT     [reduce using rule 23 (block)]
    TOK_ORD        reduce using rule 16 (func)
    TOK_ORD        [reduce using rule 23 (block)]
    TOK_CHR        reduce using rule 16 (func)
    TOK_CHR        [reduce using rule 23 (block)]
    TOK_NEW        reduce using rule 16 (func)
    TOK_NEW        [reduce using rule 23 (block)]
    TOK_TYPEID     reduce using rule 16 (func)
    TOK_TYPEID     [reduce using rule 23 (block)]
    '+'            reduce using rule 16 (func)
    '+'            [reduce using rule 23 (block)]
    '-'            reduce using rule 16 (func)
    '-'            [reduce using rule 23 (block)]
    '!'            reduce using rule 16 (func)
    '!'            [reduce using rule 23 (block)]
    '('            reduce using rule 16 (func)
    '('            [reduce using rule 23 (block)]
    '{'            reduce using rule 16 (func)
    '{'            [reduce using rule 23 (block)]
    ';'            reduce using rule 16 (func)
    ';'            [reduce using rule 23 (block)]
    $default       reduce using rule 16 (func)


State 127

   15 func: identdec '(' ')' block .

    $default  reduce using rule 15 (func)


State 128

   17 func: identdec paramli ')' ';' .
   23 block: ';' .

    $end           reduce using rule 17 (func)
    $end           [reduce using rule 23 (block)]
    TOK_IDENT      reduce using rule 17 (func)
    TOK_IDENT      [reduce using rule 23 (block)]
    NUMBER         reduce using rule 17 (func)
    NUMBER         [reduce using rule 23 (block)]
    TOK_VOID       reduce using rule 17 (func)
    TOK_VOID       [reduce using rule 23 (block)]
    TOK_INT        reduce using rule 17 (func)
    TOK_INT        [reduce using rule 23 (block)]
    TOK_STRING     reduce using rule 17 (func)
    TOK_STRING     [reduce using rule 23 (block)]
    TOK_RETURN     reduce using rule 17 (func)
    TOK_RETURN     [reduce using rule 23 (block)]
    TOK_IF         reduce using rule 17 (func)
    TOK_IF         [reduce using rule 23 (block)]
    TOK_WHILE      reduce using rule 17 (func)
    TOK_WHILE      [reduce using rule 23 (block)]
    TOK_NULL       reduce using rule 17 (func)
    TOK_NULL       [reduce using rule 23 (block)]
    TOK_INTCON     reduce using rule 17 (func)
    TOK_INTCON     [reduce using rule 23 (block)]
    TOK_CHARCON    reduce using rule 17 (func)
    TOK_CHARCON    [reduce using rule 23 (block)]
    TOK_STRINGCON  reduce using rule 17 (func)
    TOK_STRINGCON  [reduce using rule 23 (block)]
    TOK_STRUCT     reduce using rule 17 (func)
    TOK_STRUCT     [reduce using rule 23 (block)]
    TOK_ORD        reduce using rule 17 (func)
    TOK_ORD        [reduce using rule 23 (block)]
    TOK_CHR        reduce using rule 17 (func)
    TOK_CHR        [reduce using rule 23 (block)]
    TOK_NEW        reduce using rule 17 (func)
    TOK_NEW        [reduce using rule 23 (block)]
    TOK_TYPEID     reduce using rule 17 (func)
    TOK_TYPEID     [reduce using rule 23 (block)]
    '+'            reduce using rule 17 (func)
    '+'            [reduce using rule 23 (block)]
    '-'            reduce using rule 17 (func)
    '-'            [reduce using rule 23 (block)]
    '!'            reduce using rule 17 (func)
    '!'            [reduce using rule 23 (block)]
    '('            reduce using rule 17 (func)
    '('            [reduce using rule 23 (block)]
    '{'            reduce using rule 17 (func)
    '{'            [reduce using rule 23 (block)]
    ';'            reduce using rule 17 (func)
    ';'            [reduce using rule 23 (block)]
    $default       reduce using rule 17 (func)


State 129

   18 func: identdec paramli ')' block .

    $default  reduce using rule 18 (func)


State 130

   19 paramli: paramli ',' identdec .

    $default  reduce using rule 19 (paramli)


State 131

   71 variable: expr '[' expr ']' .

    $default  reduce using rule 71 (variable)


State 132

   36 ifelse: TOK_IF '(' expr ')' stmt .
   37       | TOK_IF '(' expr ')' stmt . TOK_ELSE stmt

    TOK_ELSE  shift, and go to state 140

    TOK_ELSE  [reduce using rule 36 (ifelse)]
    $default  reduce using rule 36 (ifelse)


State 133

   35 while: TOK_WHILE '(' expr ')' stmt .

    $default  reduce using rule 35 (while)


State 134

    7 s_stmts: '{' fielddec ';' .

    $default  reduce using rule 7 (s_stmts)


State 135

    9 fielddec: basetype TOK_IDENT .

    $default  reduce using rule 9 (fielddec)


State 136

   10 fielddec: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 141


State 137

    8 s_stmts: s_stmts fielddec ';' .

    $default  reduce using rule 8 (s_stmts)


State 138

   64 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 64 (allocator)


State 139

   65 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 65 (allocator)


State 140

   37 ifelse: TOK_IF '(' expr ')' stmt TOK_ELSE . stmt

    TOK_IDENT      shift, and go to state 3
    NUMBER         shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_RETURN     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_NULL       shift, and go to state 11
    TOK_INTCON     shift, and go to state 12
    TOK_CHARCON    shift, and go to state 13
    TOK_STRINGCON  shift, and go to state 14
    TOK_ORD        shift, and go to state 16
    TOK_CHR        shift, and go to state 17
    TOK_NEW        shift, and go to state 18
    TOK_TYPEID     shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '!'            shift, and go to state 22
    '('            shift, and go to state 23
    '{'            shift, and go to state 24
    ';'            shift, and go to state 25

    basetype   go to state 27
    identdec   go to state 59
    block      go to state 30
    b_stmts    go to state 31
    stmt       go to state 142
    vardecl    go to state 33
    while      go to state 34
    ifelse     go to state 35
    return     go to state 36
    expr       go to state 37
    allocator  go to state 38
    call       go to state 39
    c_args     go to state 40
    variable   go to state 41
    constant   go to state 42


State 141

   10 fielddec: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 10 (fielddec)


State 142

   37 ifelse: TOK_IF '(' expr ')' stmt TOK_ELSE stmt .

    $default  reduce using rule 37 (ifelse)
