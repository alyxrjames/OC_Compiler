Terminals unused in grammar

   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ROOT
   TOK_DECLID
   TOK_INDEX
   TOK_NEWSTRING
   TOK_RETURNVOID
   TOK_VARDECL
   TOK_FUNCTION
   TOK_PARAMLIST
   TOK_PROTOTYPE


State 137 conflicts: 27 reduce/reduce
State 139 conflicts: 27 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program statement
    4        | program error '}'
    5        | program error ';'
    6        | /* empty */

    7 structdef: declarations '}'

    8 fielddecl: basetype TOK_IDENT
    9          | basetype TOK_ARRAY TOK_IDENT

   10 declarations: TOK_STRUCT TOK_IDENT '{'
   11             | declarations fielddecl ';'

   12 basetype: TOK_VOID
   13         | TOK_BOOL
   14         | TOK_CHAR
   15         | TOK_INT
   16         | TOK_STRING
   17         | TOK_IDENT

   18 function: identdecl '(' ')' ';'
   19         | identdecl '(' ')' block
   20         | identdecl funcp ')' block
   21         | identdecl funcp ')' ';'

   22 funcp: '(' identdecl
   23      | funcp ',' identdecl

   24 identdecl: basetype TOK_ARRAY TOK_IDENT
   25          | basetype TOK_IDENT

   26 block: '{' '}'
   27      | blkstmts '}'
   28      | ';'

   29 blkstmts: '{' statement
   30         | blkstmts statement

   31 statement: block
   32          | vardecl
   33          | while
   34          | ifelse
   35          | return
   36          | expr ';'

   37 vardecl: identdecl '=' expr ';'

   38 while: TOK_WHILE '(' expr ')' statement

   39 ifelse: TOK_IF '(' expr ')' statement
   40       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   41 return: TOK_RETURN expr ';'
   42       | TOK_RETURN ';'

   43 expr: constant
   44     | variable
   45     | '(' expr ')'
   46     | call
   47     | allocator
   48     | expr '=' expr
   49     | expr TOK_EQ expr
   50     | expr TOK_NE expr
   51     | expr TOK_LT expr
   52     | expr TOK_LE expr
   53     | expr TOK_GT expr
   54     | expr TOK_GE expr
   55     | expr '+' expr
   56     | expr '-' expr
   57     | expr '*' expr
   58     | expr '/' expr
   59     | expr '%' expr
   60     | TOK_ORD expr
   61     | TOK_CHR expr
   62     | '!' expr
   63     | '+' expr
   64     | '-' expr

   65 allocator: TOK_NEW TOK_IDENT '(' ')'
   66          | TOK_NEW TOK_STRING '(' expr ')'
   67          | TOK_NEW basetype '[' expr ']'

   68 call: TOK_IDENT '(' ')'
   69     | arg ')'

   70 arg: TOK_IDENT '(' expr
   71    | arg ',' expr

   72 variable: TOK_IDENT
   73         | expr '[' expr ']'
   74         | expr '.' TOK_IDENT

   75 constant: TOK_INTCON
   76         | TOK_CHARCON
   77         | TOK_STRINGCON
   78         | TOK_FALSE
   79         | TOK_TRUE
   80         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 62
'%' (37) 59
'(' (40) 18 19 22 38 39 40 45 65 66 68 70
')' (41) 18 19 20 21 38 39 40 45 65 66 68 69
'*' (42) 57
'+' (43) 55 63
',' (44) 23 71
'-' (45) 56 64
'.' (46) 74
'/' (47) 58
';' (59) 5 11 18 21 28 36 37 41 42
'=' (61) 37 48
'[' (91) 67 73
']' (93) 67 73
'{' (123) 10 26 29
'}' (125) 4 7 26 27
error (256) 4 5
TOK_VOID (258) 12
TOK_BOOL (259) 13
TOK_CHAR (260) 14
TOK_INT (261) 15
TOK_STRING (262) 16 66
TOK_IF (263) 39 40
TOK_ELSE (264) 40
TOK_WHILE (265) 38
TOK_RETURN (266) 41 42
TOK_STRUCT (267) 10
TOK_FALSE (268) 78
TOK_TRUE (269) 79
TOK_NULL (270) 80
TOK_NEW (271) 65 66 67
TOK_ARRAY (272) 9 24
TOK_EQ (273) 49
TOK_NE (274) 50
TOK_LT (275) 51
TOK_LE (276) 52
TOK_GT (277) 53
TOK_GE (278) 54
TOK_IDENT (279) 8 9 10 17 24 25 65 68 70 72 74
TOK_INTCON (280) 75
TOK_CHARCON (281) 76
TOK_STRINGCON (282) 77
TOK_BLOCK (283)
TOK_CALL (284)
TOK_IFELSE (285)
TOK_INITDECL (286)
TOK_POS (287)
TOK_NEG (288)
TOK_NEWARRAY (289)
TOK_TYPEID (290)
TOK_FIELD (291)
TOK_ORD (292) 60
TOK_CHR (293) 61
TOK_ROOT (294)
TOK_DECLID (295)
TOK_INDEX (296)
TOK_NEWSTRING (297)
TOK_RETURNVOID (298)
TOK_VARDECL (299)
TOK_FUNCTION (300)
TOK_PARAMLIST (301)
TOK_PROTOTYPE (302)


Nonterminals, with rules where they appear

$accept (64)
    on left: 0
program (65)
    on left: 1 2 3 4 5 6, on right: 0 1 2 3 4 5
structdef (66)
    on left: 7, on right: 1
fielddecl (67)
    on left: 8 9, on right: 11
declarations (68)
    on left: 10 11, on right: 7 11
basetype (69)
    on left: 12 13 14 15 16 17, on right: 8 9 24 25 67
function (70)
    on left: 18 19 20 21, on right: 2
funcp (71)
    on left: 22 23, on right: 20 21 23
identdecl (72)
    on left: 24 25, on right: 18 19 20 21 22 23 37
block (73)
    on left: 26 27 28, on right: 19 20 31
blkstmts (74)
    on left: 29 30, on right: 27 30
statement (75)
    on left: 31 32 33 34 35 36, on right: 3 29 30 38 39 40
vardecl (76)
    on left: 37, on right: 32
while (77)
    on left: 38, on right: 33
ifelse (78)
    on left: 39 40, on right: 34
return (79)
    on left: 41 42, on right: 35
expr (80)
    on left: 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
    61 62 63 64, on right: 36 37 38 39 40 41 45 48 49 50 51 52 53 54
    55 56 57 58 59 60 61 62 63 64 66 67 70 71 73 74
allocator (81)
    on left: 65 66 67, on right: 47
call (82)
    on left: 68 69, on right: 46
arg (83)
    on left: 70 71, on right: 69 71
variable (84)
    on left: 72 73 74, on right: 44
constant (85)
    on left: 75 76 77 78 79 80, on right: 43


State 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . statement
    4        | program . error '}'
    5        | program . error ';'

    $end           shift, and go to state 2
    error          shift, and go to state 3
    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    structdef     go to state 29
    declarations  go to state 30
    basetype      go to state 31
    function      go to state 32
    identdecl     go to state 33
    block         go to state 34
    blkstmts      go to state 35
    statement     go to state 36
    vardecl       go to state 37
    while         go to state 38
    ifelse        go to state 39
    return        go to state 40
    expr          go to state 41
    allocator     go to state 42
    call          go to state 43
    arg           go to state 44
    variable      go to state 45
    constant      go to state 46


State 2

    0 $accept: program $end .

    $default  accept


State 3

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 47
    ';'  shift, and go to state 48


State 4

   12 basetype: TOK_VOID .

    $default  reduce using rule 12 (basetype)


State 5

   13 basetype: TOK_BOOL .

    $default  reduce using rule 13 (basetype)


State 6

   14 basetype: TOK_CHAR .

    $default  reduce using rule 14 (basetype)


State 7

   15 basetype: TOK_INT .

    $default  reduce using rule 15 (basetype)


State 8

   16 basetype: TOK_STRING .

    $default  reduce using rule 16 (basetype)


State 9

   39 ifelse: TOK_IF . '(' expr ')' statement
   40       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 49


State 10

   38 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 50


State 11

   41 return: TOK_RETURN . expr ';'
   42       | TOK_RETURN . ';'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 52

    expr       go to state 53
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 12

   10 declarations: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 54


State 13

   78 constant: TOK_FALSE .

    $default  reduce using rule 78 (constant)


State 14

   79 constant: TOK_TRUE .

    $default  reduce using rule 79 (constant)


State 15

   80 constant: TOK_NULL .

    $default  reduce using rule 80 (constant)


State 16

   65 allocator: TOK_NEW . TOK_IDENT '(' ')'
   66          | TOK_NEW . TOK_STRING '(' expr ')'
   67          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 4
    TOK_BOOL    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 55
    TOK_IDENT   shift, and go to state 56

    basetype  go to state 57


State 17

   17 basetype: TOK_IDENT .
   68 call: TOK_IDENT . '(' ')'
   70 arg: TOK_IDENT . '(' expr
   72 variable: TOK_IDENT .

    '('  shift, and go to state 58

    TOK_ARRAY  reduce using rule 17 (basetype)
    TOK_IDENT  reduce using rule 17 (basetype)
    $default   reduce using rule 72 (variable)


State 18

   75 constant: TOK_INTCON .

    $default  reduce using rule 75 (constant)


State 19

   76 constant: TOK_CHARCON .

    $default  reduce using rule 76 (constant)


State 20

   77 constant: TOK_STRINGCON .

    $default  reduce using rule 77 (constant)


State 21

   60 expr: TOK_ORD . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 59
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 22

   61 expr: TOK_CHR . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 60
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 23

   63 expr: '+' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 61
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 24

   64 expr: '-' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 62
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 25

   62 expr: '!' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 63
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 26

   45 expr: '(' . expr ')'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 64
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 27

   28 block: ';' .

    $default  reduce using rule 28 (block)


State 28

   26 block: '{' . '}'
   29 blkstmts: '{' . statement

    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    '}'            shift, and go to state 65
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 66
    block      go to state 34
    blkstmts   go to state 35
    statement  go to state 67
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 29

    1 program: program structdef .

    $default  reduce using rule 1 (program)


State 30

    7 structdef: declarations . '}'
   11 declarations: declarations . fielddecl ';'

    TOK_VOID    shift, and go to state 4
    TOK_BOOL    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 68
    '}'         shift, and go to state 69

    fielddecl  go to state 70
    basetype   go to state 71


State 31

   24 identdecl: basetype . TOK_ARRAY TOK_IDENT
   25          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 72
    TOK_IDENT  shift, and go to state 73


State 32

    2 program: program function .

    $default  reduce using rule 2 (program)


State 33

   18 function: identdecl . '(' ')' ';'
   19         | identdecl . '(' ')' block
   20         | identdecl . funcp ')' block
   21         | identdecl . funcp ')' ';'
   37 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 74
    '('  shift, and go to state 75

    funcp  go to state 76


State 34

   31 statement: block .

    $default  reduce using rule 31 (statement)


State 35

   27 block: blkstmts . '}'
   30 blkstmts: blkstmts . statement

    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    '}'            shift, and go to state 77
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 66
    block      go to state 34
    blkstmts   go to state 35
    statement  go to state 78
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 36

    3 program: program statement .

    $default  reduce using rule 3 (program)


State 37

   32 statement: vardecl .

    $default  reduce using rule 32 (statement)


State 38

   33 statement: while .

    $default  reduce using rule 33 (statement)


State 39

   34 statement: ifelse .

    $default  reduce using rule 34 (statement)


State 40

   35 statement: return .

    $default  reduce using rule 35 (statement)


State 41

   36 statement: expr . ';'
   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ';'     shift, and go to state 93


State 42

   47 expr: allocator .

    $default  reduce using rule 47 (expr)


State 43

   46 expr: call .

    $default  reduce using rule 46 (expr)


State 44

   69 call: arg . ')'
   71 arg: arg . ',' expr

    ')'  shift, and go to state 94
    ','  shift, and go to state 95


State 45

   44 expr: variable .

    $default  reduce using rule 44 (expr)


State 46

   43 expr: constant .

    $default  reduce using rule 43 (expr)


State 47

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 48

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 49

   39 ifelse: TOK_IF '(' . expr ')' statement
   40       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 96
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 50

   38 while: TOK_WHILE '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 97
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 51

   68 call: TOK_IDENT . '(' ')'
   70 arg: TOK_IDENT . '(' expr
   72 variable: TOK_IDENT .

    '('  shift, and go to state 58

    $default  reduce using rule 72 (variable)


State 52

   42 return: TOK_RETURN ';' .

    $default  reduce using rule 42 (return)


State 53

   41 return: TOK_RETURN expr . ';'
   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ';'     shift, and go to state 98


State 54

   10 declarations: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 99


State 55

   16 basetype: TOK_STRING .
   66 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 100

    $default  reduce using rule 16 (basetype)


State 56

   17 basetype: TOK_IDENT .
   65 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 101

    $default  reduce using rule 17 (basetype)


State 57

   67 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 102


State 58

   68 call: TOK_IDENT '(' . ')'
   70 arg: TOK_IDENT '(' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ')'            shift, and go to state 103

    expr       go to state 104
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 59

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   60     | TOK_ORD expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 60 (expr)


State 60

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   61     | TOK_CHR expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 61 (expr)


State 61

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   63     | '+' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 63 (expr)


State 62

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   64     | '-' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 64 (expr)


State 63

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   62     | '!' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 62 (expr)


State 64

   45 expr: '(' expr . ')'
   48     | expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ')'     shift, and go to state 105


State 65

   26 block: '{' '}' .

    $default  reduce using rule 26 (block)


State 66

   37 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 74


State 67

   29 blkstmts: '{' statement .

    $default  reduce using rule 29 (blkstmts)


State 68

   17 basetype: TOK_IDENT .

    $default  reduce using rule 17 (basetype)


State 69

    7 structdef: declarations '}' .

    $default  reduce using rule 7 (structdef)


State 70

   11 declarations: declarations fielddecl . ';'

    ';'  shift, and go to state 106


State 71

    8 fielddecl: basetype . TOK_IDENT
    9          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 107
    TOK_IDENT  shift, and go to state 108


State 72

   24 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 109


State 73

   25 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 25 (identdecl)


State 74

   37 vardecl: identdecl '=' . expr ';'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 110
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 75

   18 function: identdecl '(' . ')' ';'
   19         | identdecl '(' . ')' block
   22 funcp: '(' . identdecl

    TOK_VOID    shift, and go to state 4
    TOK_BOOL    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 68
    ')'         shift, and go to state 111

    basetype   go to state 31
    identdecl  go to state 112


State 76

   20 function: identdecl funcp . ')' block
   21         | identdecl funcp . ')' ';'
   23 funcp: funcp . ',' identdecl

    ')'  shift, and go to state 113
    ','  shift, and go to state 114


State 77

   27 block: blkstmts '}' .

    $default  reduce using rule 27 (block)


State 78

   30 blkstmts: blkstmts statement .

    $default  reduce using rule 30 (blkstmts)


State 79

   49 expr: expr TOK_EQ . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 115
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 80

   50 expr: expr TOK_NE . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 116
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 81

   51 expr: expr TOK_LT . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 117
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 82

   52 expr: expr TOK_LE . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 118
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 83

   53 expr: expr TOK_GT . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 119
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 84

   54 expr: expr TOK_GE . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 120
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 85

   48 expr: expr '=' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 121
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 86

   55 expr: expr '+' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 122
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 87

   56 expr: expr '-' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 123
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 88

   57 expr: expr '*' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 124
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 89

   58 expr: expr '/' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 125
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 90

   59 expr: expr '%' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 126
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 91

   73 variable: expr '[' . expr ']'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 127
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 92

   74 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 128


State 93

   36 statement: expr ';' .

    $default  reduce using rule 36 (statement)


State 94

   69 call: arg ')' .

    $default  reduce using rule 69 (call)


State 95

   71 arg: arg ',' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 129
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 96

   39 ifelse: TOK_IF '(' expr . ')' statement
   40       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ')'     shift, and go to state 130


State 97

   38 while: TOK_WHILE '(' expr . ')' statement
   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ')'     shift, and go to state 131


State 98

   41 return: TOK_RETURN expr ';' .

    $default  reduce using rule 41 (return)


State 99

   10 declarations: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 10 (declarations)


State 100

   66 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 132
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 101

   65 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 133


State 102

   67 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 134
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 103

   68 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 68 (call)


State 104

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   70 arg: TOK_IDENT '(' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92

    $default  reduce using rule 70 (arg)


State 105

   45 expr: '(' expr ')' .

    $default  reduce using rule 45 (expr)


State 106

   11 declarations: declarations fielddecl ';' .

    $default  reduce using rule 11 (declarations)


State 107

    9 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 135


State 108

    8 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 8 (fielddecl)


State 109

   24 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 24 (identdecl)


State 110

   37 vardecl: identdecl '=' expr . ';'
   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ';'     shift, and go to state 136


State 111

   18 function: identdecl '(' ')' . ';'
   19         | identdecl '(' ')' . block

    ';'  shift, and go to state 137
    '{'  shift, and go to state 28

    block     go to state 138
    blkstmts  go to state 35


State 112

   22 funcp: '(' identdecl .

    $default  reduce using rule 22 (funcp)


State 113

   20 function: identdecl funcp ')' . block
   21         | identdecl funcp ')' . ';'

    ';'  shift, and go to state 139
    '{'  shift, and go to state 28

    block     go to state 140
    blkstmts  go to state 35


State 114

   23 funcp: funcp ',' . identdecl

    TOK_VOID    shift, and go to state 4
    TOK_BOOL    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 68

    basetype   go to state 31
    identdecl  go to state 141


State 115

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   49     | expr TOK_EQ expr .
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 49 (expr)


State 116

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   50     | expr TOK_NE expr .
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 50 (expr)


State 117

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   51     | expr TOK_LT expr .
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 51 (expr)


State 118

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   52     | expr TOK_LE expr .
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 52 (expr)


State 119

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   53     | expr TOK_GT expr .
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 53 (expr)


State 120

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   54     | expr TOK_GE expr .
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 54 (expr)


State 121

   48 expr: expr . '=' expr
   48     | expr '=' expr .
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92

    $default  reduce using rule 48 (expr)


State 122

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   55     | expr '+' expr .
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 55 (expr)


State 123

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   56     | expr '-' expr .
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 56 (expr)


State 124

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   57     | expr '*' expr .
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 57 (expr)


State 125

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   58     | expr '/' expr .
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 58 (expr)


State 126

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   59     | expr '%' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 59 (expr)


State 127

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   73         | expr '[' expr . ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ']'     shift, and go to state 142


State 128

   74 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 74 (variable)


State 129

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   71 arg: arg ',' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92

    $default  reduce using rule 71 (arg)


State 130

   39 ifelse: TOK_IF '(' expr ')' . statement
   40       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 66
    block      go to state 34
    blkstmts   go to state 35
    statement  go to state 143
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 131

   38 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 66
    block      go to state 34
    blkstmts   go to state 35
    statement  go to state 144
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 132

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   66 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ')'     shift, and go to state 145


State 133

   65 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 65 (allocator)


State 134

   48 expr: expr . '=' expr
   49     | expr . TOK_EQ expr
   50     | expr . TOK_NE expr
   51     | expr . TOK_LT expr
   52     | expr . TOK_LE expr
   53     | expr . TOK_GT expr
   54     | expr . TOK_GE expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '%' expr
   67 allocator: TOK_NEW basetype '[' expr . ']'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ']'     shift, and go to state 146


State 135

    9 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 9 (fielddecl)


State 136

   37 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 37 (vardecl)


State 137

   18 function: identdecl '(' ')' ';' .
   28 block: ';' .

    $end           reduce using rule 18 (function)
    $end           [reduce using rule 28 (block)]
    error          reduce using rule 18 (function)
    error          [reduce using rule 28 (block)]
    TOK_VOID       reduce using rule 18 (function)
    TOK_VOID       [reduce using rule 28 (block)]
    TOK_BOOL       reduce using rule 18 (function)
    TOK_BOOL       [reduce using rule 28 (block)]
    TOK_CHAR       reduce using rule 18 (function)
    TOK_CHAR       [reduce using rule 28 (block)]
    TOK_INT        reduce using rule 18 (function)
    TOK_INT        [reduce using rule 28 (block)]
    TOK_STRING     reduce using rule 18 (function)
    TOK_STRING     [reduce using rule 28 (block)]
    TOK_IF         reduce using rule 18 (function)
    TOK_IF         [reduce using rule 28 (block)]
    TOK_WHILE      reduce using rule 18 (function)
    TOK_WHILE      [reduce using rule 28 (block)]
    TOK_RETURN     reduce using rule 18 (function)
    TOK_RETURN     [reduce using rule 28 (block)]
    TOK_STRUCT     reduce using rule 18 (function)
    TOK_STRUCT     [reduce using rule 28 (block)]
    TOK_FALSE      reduce using rule 18 (function)
    TOK_FALSE      [reduce using rule 28 (block)]
    TOK_TRUE       reduce using rule 18 (function)
    TOK_TRUE       [reduce using rule 28 (block)]
    TOK_NULL       reduce using rule 18 (function)
    TOK_NULL       [reduce using rule 28 (block)]
    TOK_NEW        reduce using rule 18 (function)
    TOK_NEW        [reduce using rule 28 (block)]
    TOK_IDENT      reduce using rule 18 (function)
    TOK_IDENT      [reduce using rule 28 (block)]
    TOK_INTCON     reduce using rule 18 (function)
    TOK_INTCON     [reduce using rule 28 (block)]
    TOK_CHARCON    reduce using rule 18 (function)
    TOK_CHARCON    [reduce using rule 28 (block)]
    TOK_STRINGCON  reduce using rule 18 (function)
    TOK_STRINGCON  [reduce using rule 28 (block)]
    TOK_ORD        reduce using rule 18 (function)
    TOK_ORD        [reduce using rule 28 (block)]
    TOK_CHR        reduce using rule 18 (function)
    TOK_CHR        [reduce using rule 28 (block)]
    '+'            reduce using rule 18 (function)
    '+'            [reduce using rule 28 (block)]
    '-'            reduce using rule 18 (function)
    '-'            [reduce using rule 28 (block)]
    '!'            reduce using rule 18 (function)
    '!'            [reduce using rule 28 (block)]
    '('            reduce using rule 18 (function)
    '('            [reduce using rule 28 (block)]
    ';'            reduce using rule 18 (function)
    ';'            [reduce using rule 28 (block)]
    '{'            reduce using rule 18 (function)
    '{'            [reduce using rule 28 (block)]
    $default       reduce using rule 18 (function)


State 138

   19 function: identdecl '(' ')' block .

    $default  reduce using rule 19 (function)


State 139

   21 function: identdecl funcp ')' ';' .
   28 block: ';' .

    $end           reduce using rule 21 (function)
    $end           [reduce using rule 28 (block)]
    error          reduce using rule 21 (function)
    error          [reduce using rule 28 (block)]
    TOK_VOID       reduce using rule 21 (function)
    TOK_VOID       [reduce using rule 28 (block)]
    TOK_BOOL       reduce using rule 21 (function)
    TOK_BOOL       [reduce using rule 28 (block)]
    TOK_CHAR       reduce using rule 21 (function)
    TOK_CHAR       [reduce using rule 28 (block)]
    TOK_INT        reduce using rule 21 (function)
    TOK_INT        [reduce using rule 28 (block)]
    TOK_STRING     reduce using rule 21 (function)
    TOK_STRING     [reduce using rule 28 (block)]
    TOK_IF         reduce using rule 21 (function)
    TOK_IF         [reduce using rule 28 (block)]
    TOK_WHILE      reduce using rule 21 (function)
    TOK_WHILE      [reduce using rule 28 (block)]
    TOK_RETURN     reduce using rule 21 (function)
    TOK_RETURN     [reduce using rule 28 (block)]
    TOK_STRUCT     reduce using rule 21 (function)
    TOK_STRUCT     [reduce using rule 28 (block)]
    TOK_FALSE      reduce using rule 21 (function)
    TOK_FALSE      [reduce using rule 28 (block)]
    TOK_TRUE       reduce using rule 21 (function)
    TOK_TRUE       [reduce using rule 28 (block)]
    TOK_NULL       reduce using rule 21 (function)
    TOK_NULL       [reduce using rule 28 (block)]
    TOK_NEW        reduce using rule 21 (function)
    TOK_NEW        [reduce using rule 28 (block)]
    TOK_IDENT      reduce using rule 21 (function)
    TOK_IDENT      [reduce using rule 28 (block)]
    TOK_INTCON     reduce using rule 21 (function)
    TOK_INTCON     [reduce using rule 28 (block)]
    TOK_CHARCON    reduce using rule 21 (function)
    TOK_CHARCON    [reduce using rule 28 (block)]
    TOK_STRINGCON  reduce using rule 21 (function)
    TOK_STRINGCON  [reduce using rule 28 (block)]
    TOK_ORD        reduce using rule 21 (function)
    TOK_ORD        [reduce using rule 28 (block)]
    TOK_CHR        reduce using rule 21 (function)
    TOK_CHR        [reduce using rule 28 (block)]
    '+'            reduce using rule 21 (function)
    '+'            [reduce using rule 28 (block)]
    '-'            reduce using rule 21 (function)
    '-'            [reduce using rule 28 (block)]
    '!'            reduce using rule 21 (function)
    '!'            [reduce using rule 28 (block)]
    '('            reduce using rule 21 (function)
    '('            [reduce using rule 28 (block)]
    ';'            reduce using rule 21 (function)
    ';'            [reduce using rule 28 (block)]
    '{'            reduce using rule 21 (function)
    '{'            [reduce using rule 28 (block)]
    $default       reduce using rule 21 (function)


State 140

   20 function: identdecl funcp ')' block .

    $default  reduce using rule 20 (function)


State 141

   23 funcp: funcp ',' identdecl .

    $default  reduce using rule 23 (funcp)


State 142

   73 variable: expr '[' expr ']' .

    $default  reduce using rule 73 (variable)


State 143

   39 ifelse: TOK_IF '(' expr ')' statement .
   40       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 147

    $default  reduce using rule 39 (ifelse)


State 144

   38 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 38 (while)


State 145

   66 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 66 (allocator)


State 146

   67 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 67 (allocator)


State 147

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 31
    identdecl  go to state 66
    block      go to state 34
    blkstmts   go to state 35
    statement  go to state 148
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    arg        go to state 44
    variable   go to state 45
    constant   go to state 46


State 148

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 40 (ifelse)
