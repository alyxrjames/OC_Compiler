Nonterminals useless in grammar

   param


Terminals unused in grammar

   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ROOT
   TOK_DECLID
   TOK_INDEX
   TOK_NEWSTRING
   TOK_RETURNVOID
   TOK_VARDECL
   TOK_FUNCTION
   TOK_PARAMLIST
   TOK_PROTOTYPE


Rules useless in grammar

   80 param: param ',' identdecl
   81      | '(' identdecl


State 130 conflicts: 27 reduce/reduce
State 132 conflicts: 27 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program statement
    4        | program error '}'
    5        | program error ';'
    6        | /* empty */

    7 @1: /* empty */

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' @1 declarations '}'

    9 declarations: TOK_STRUCT TOK_IDENT '{' identdecl ';'
   10             | declarations identdecl ';'

   11 basetype: TOK_VOID
   12         | TOK_BOOL
   13         | TOK_CHAR
   14         | TOK_INT
   15         | TOK_STRING
   16         | TOK_IDENT

   17 function: identdecl '(' ')' ';'
   18         | identdecl '(' ')' block
   19         | identdecl funcp ')' block
   20         | identdecl funcp ')' ';'

   21 funcp: '(' identdecl
   22      | funcp ',' identdecl

   23 identdecl: basetype TOK_ARRAY TOK_IDENT
   24          | basetype TOK_IDENT

   25 block: '{' '}'
   26      | blkstmts '}'
   27      | ';'

   28 blkstmts: '{' statement
   29         | blkstmts statement

   30 statement: block
   31          | vardecl
   32          | while
   33          | ifelse
   34          | return
   35          | expr ';'

   36 vardecl: identdecl '=' expr ';'

   37 while: TOK_WHILE '(' expr ')' statement

   38 ifelse: TOK_IF '(' expr ')' statement
   39       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   40 return: TOK_RETURN expr ';'
   41       | TOK_RETURN ';'

   42 expr: constant
   43     | variable
   44     | '(' expr ')'
   45     | call
   46     | allocator
   47     | expr '=' expr
   48     | expr TOK_EQ expr
   49     | expr TOK_NE expr
   50     | expr TOK_LT expr
   51     | expr TOK_LE expr
   52     | expr TOK_GT expr
   53     | expr TOK_GE expr
   54     | expr '+' expr
   55     | expr '-' expr
   56     | expr '*' expr
   57     | expr '/' expr
   58     | expr '%' expr
   59     | TOK_ORD expr
   60     | TOK_CHR expr
   61     | '!' expr
   62     | '+' expr
   63     | '-' expr

   64 allocator: TOK_NEW TOK_IDENT '(' ')'
   65          | TOK_NEW TOK_STRING '(' expr ')'
   66          | TOK_NEW basetype '[' expr ']'

   67 call: TOK_IDENT '(' ')'
   68     | arg ')'

   69 arg: TOK_IDENT '(' expr
   70    | arg ',' expr

   71 variable: TOK_IDENT
   72         | expr '[' expr ']'
   73         | expr '.' TOK_IDENT

   74 constant: TOK_INTCON
   75         | TOK_CHARCON
   76         | TOK_STRINGCON
   77         | TOK_FALSE
   78         | TOK_TRUE
   79         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 61
'%' (37) 58
'(' (40) 17 18 21 37 38 39 44 64 65 67 69
')' (41) 17 18 19 20 37 38 39 44 64 65 67 68
'*' (42) 56
'+' (43) 54 62
',' (44) 22 70
'-' (45) 55 63
'.' (46) 73
'/' (47) 57
';' (59) 5 9 10 17 20 27 35 36 40 41
'=' (61) 36 47
'[' (91) 66 72
']' (93) 66 72
'{' (123) 8 9 25 28
'}' (125) 4 8 25 26
error (256) 4 5
TOK_VOID (258) 11
TOK_BOOL (259) 12
TOK_CHAR (260) 13
TOK_INT (261) 14
TOK_STRING (262) 15 65
TOK_IF (263) 38 39
TOK_ELSE (264) 39
TOK_WHILE (265) 37
TOK_RETURN (266) 40 41
TOK_STRUCT (267) 8 9
TOK_FALSE (268) 77
TOK_TRUE (269) 78
TOK_NULL (270) 79
TOK_NEW (271) 64 65 66
TOK_ARRAY (272) 23
TOK_EQ (273) 48
TOK_NE (274) 49
TOK_LT (275) 50
TOK_LE (276) 51
TOK_GT (277) 52
TOK_GE (278) 53
TOK_IDENT (279) 8 9 16 23 24 64 67 69 71 73
TOK_INTCON (280) 74
TOK_CHARCON (281) 75
TOK_STRINGCON (282) 76
TOK_BLOCK (283)
TOK_CALL (284)
TOK_IFELSE (285)
TOK_INITDECL (286)
TOK_POS (287)
TOK_NEG (288)
TOK_NEWARRAY (289)
TOK_TYPEID (290)
TOK_FIELD (291)
TOK_ORD (292) 59
TOK_CHR (293) 60
TOK_ROOT (294)
TOK_DECLID (295)
TOK_INDEX (296)
TOK_NEWSTRING (297)
TOK_RETURNVOID (298)
TOK_VARDECL (299)
TOK_FUNCTION (300)
TOK_PARAMLIST (301)
TOK_PROTOTYPE (302)


Nonterminals, with rules where they appear

$accept (64)
    on left: 0
program (65)
    on left: 1 2 3 4 5 6, on right: 0 1 2 3 4 5
structdef (66)
    on left: 8, on right: 1
@1 (67)
    on left: 7, on right: 8
declarations (68)
    on left: 9 10, on right: 8 10
basetype (69)
    on left: 11 12 13 14 15 16, on right: 23 24 66
function (70)
    on left: 17 18 19 20, on right: 2
funcp (71)
    on left: 21 22, on right: 19 20 22
identdecl (72)
    on left: 23 24, on right: 9 10 17 18 19 20 21 22 36
block (73)
    on left: 25 26 27, on right: 18 19 30
blkstmts (74)
    on left: 28 29, on right: 26 29
statement (75)
    on left: 30 31 32 33 34 35, on right: 3 28 29 37 38 39
vardecl (76)
    on left: 36, on right: 31
while (77)
    on left: 37, on right: 32
ifelse (78)
    on left: 38 39, on right: 33
return (79)
    on left: 40 41, on right: 34
expr (80)
    on left: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
    60 61 62 63, on right: 35 36 37 38 39 40 44 47 48 49 50 51 52 53
    54 55 56 57 58 59 60 61 62 63 65 66 69 70 72 73
allocator (81)
    on left: 64 65 66, on right: 46
call (82)
    on left: 67 68, on right: 45
arg (83)
    on left: 69 70, on right: 68 70
variable (84)
    on left: 71 72 73, on right: 43
constant (85)
    on left: 74 75 76 77 78 79, on right: 42


State 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . statement
    4        | program . error '}'
    5        | program . error ';'

    $end           shift, and go to state 2
    error          shift, and go to state 3
    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    structdef  go to state 29
    basetype   go to state 30
    function   go to state 31
    identdecl  go to state 32
    block      go to state 33
    blkstmts   go to state 34
    statement  go to state 35
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 2

    0 $accept: program $end .

    $default  accept


State 3

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 46
    ';'  shift, and go to state 47


State 4

   11 basetype: TOK_VOID .

    $default  reduce using rule 11 (basetype)


State 5

   12 basetype: TOK_BOOL .

    $default  reduce using rule 12 (basetype)


State 6

   13 basetype: TOK_CHAR .

    $default  reduce using rule 13 (basetype)


State 7

   14 basetype: TOK_INT .

    $default  reduce using rule 14 (basetype)


State 8

   15 basetype: TOK_STRING .

    $default  reduce using rule 15 (basetype)


State 9

   38 ifelse: TOK_IF . '(' expr ')' statement
   39       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 48


State 10

   37 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 49


State 11

   40 return: TOK_RETURN . expr ';'
   41       | TOK_RETURN . ';'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 51

    expr       go to state 52
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 12

    8 structdef: TOK_STRUCT . TOK_IDENT '{' '}' @1 declarations '}'

    TOK_IDENT  shift, and go to state 53


State 13

   77 constant: TOK_FALSE .

    $default  reduce using rule 77 (constant)


State 14

   78 constant: TOK_TRUE .

    $default  reduce using rule 78 (constant)


State 15

   79 constant: TOK_NULL .

    $default  reduce using rule 79 (constant)


State 16

   64 allocator: TOK_NEW . TOK_IDENT '(' ')'
   65          | TOK_NEW . TOK_STRING '(' expr ')'
   66          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 4
    TOK_BOOL    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 54
    TOK_IDENT   shift, and go to state 55

    basetype  go to state 56


State 17

   16 basetype: TOK_IDENT .
   67 call: TOK_IDENT . '(' ')'
   69 arg: TOK_IDENT . '(' expr
   71 variable: TOK_IDENT .

    '('  shift, and go to state 57

    TOK_ARRAY  reduce using rule 16 (basetype)
    TOK_IDENT  reduce using rule 16 (basetype)
    $default   reduce using rule 71 (variable)


State 18

   74 constant: TOK_INTCON .

    $default  reduce using rule 74 (constant)


State 19

   75 constant: TOK_CHARCON .

    $default  reduce using rule 75 (constant)


State 20

   76 constant: TOK_STRINGCON .

    $default  reduce using rule 76 (constant)


State 21

   59 expr: TOK_ORD . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 58
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 22

   60 expr: TOK_CHR . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 59
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 23

   62 expr: '+' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 60
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 24

   63 expr: '-' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 61
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 25

   61 expr: '!' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 62
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 26

   44 expr: '(' . expr ')'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 63
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 27

   27 block: ';' .

    $default  reduce using rule 27 (block)


State 28

   25 block: '{' . '}'
   28 blkstmts: '{' . statement

    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    '}'            shift, and go to state 64
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 30
    identdecl  go to state 65
    block      go to state 33
    blkstmts   go to state 34
    statement  go to state 66
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 29

    1 program: program structdef .

    $default  reduce using rule 1 (program)


State 30

   23 identdecl: basetype . TOK_ARRAY TOK_IDENT
   24          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 67
    TOK_IDENT  shift, and go to state 68


State 31

    2 program: program function .

    $default  reduce using rule 2 (program)


State 32

   17 function: identdecl . '(' ')' ';'
   18         | identdecl . '(' ')' block
   19         | identdecl . funcp ')' block
   20         | identdecl . funcp ')' ';'
   36 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 69
    '('  shift, and go to state 70

    funcp  go to state 71


State 33

   30 statement: block .

    $default  reduce using rule 30 (statement)


State 34

   26 block: blkstmts . '}'
   29 blkstmts: blkstmts . statement

    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    '}'            shift, and go to state 72
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 30
    identdecl  go to state 65
    block      go to state 33
    blkstmts   go to state 34
    statement  go to state 73
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 35

    3 program: program statement .

    $default  reduce using rule 3 (program)


State 36

   31 statement: vardecl .

    $default  reduce using rule 31 (statement)


State 37

   32 statement: while .

    $default  reduce using rule 32 (statement)


State 38

   33 statement: ifelse .

    $default  reduce using rule 33 (statement)


State 39

   34 statement: return .

    $default  reduce using rule 34 (statement)


State 40

   35 statement: expr . ';'
   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LT  shift, and go to state 76
    TOK_LE  shift, and go to state 77
    TOK_GT  shift, and go to state 78
    TOK_GE  shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ';'     shift, and go to state 88


State 41

   46 expr: allocator .

    $default  reduce using rule 46 (expr)


State 42

   45 expr: call .

    $default  reduce using rule 45 (expr)


State 43

   68 call: arg . ')'
   70 arg: arg . ',' expr

    ')'  shift, and go to state 89
    ','  shift, and go to state 90


State 44

   43 expr: variable .

    $default  reduce using rule 43 (expr)


State 45

   42 expr: constant .

    $default  reduce using rule 42 (expr)


State 46

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


State 47

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


State 48

   38 ifelse: TOK_IF '(' . expr ')' statement
   39       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 91
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 49

   37 while: TOK_WHILE '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 92
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 50

   67 call: TOK_IDENT . '(' ')'
   69 arg: TOK_IDENT . '(' expr
   71 variable: TOK_IDENT .

    '('  shift, and go to state 57

    $default  reduce using rule 71 (variable)


State 51

   41 return: TOK_RETURN ';' .

    $default  reduce using rule 41 (return)


State 52

   40 return: TOK_RETURN expr . ';'
   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LT  shift, and go to state 76
    TOK_LE  shift, and go to state 77
    TOK_GT  shift, and go to state 78
    TOK_GE  shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ';'     shift, and go to state 93


State 53

    8 structdef: TOK_STRUCT TOK_IDENT . '{' '}' @1 declarations '}'

    '{'  shift, and go to state 94


State 54

   15 basetype: TOK_STRING .
   65 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 95

    $default  reduce using rule 15 (basetype)


State 55

   16 basetype: TOK_IDENT .
   64 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 96

    $default  reduce using rule 16 (basetype)


State 56

   66 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 97


State 57

   67 call: TOK_IDENT '(' . ')'
   69 arg: TOK_IDENT '(' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ')'            shift, and go to state 98

    expr       go to state 99
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 58

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   59     | TOK_ORD expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 59 (expr)


State 59

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   60     | TOK_CHR expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 60 (expr)


State 60

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   62     | '+' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 62 (expr)


State 61

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   63     | '-' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 63 (expr)


State 62

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   61     | '!' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 61 (expr)


State 63

   44 expr: '(' expr . ')'
   47     | expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LT  shift, and go to state 76
    TOK_LE  shift, and go to state 77
    TOK_GT  shift, and go to state 78
    TOK_GE  shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ')'     shift, and go to state 100


State 64

   25 block: '{' '}' .

    $default  reduce using rule 25 (block)


State 65

   36 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 69


State 66

   28 blkstmts: '{' statement .

    $default  reduce using rule 28 (blkstmts)


State 67

   23 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 101


State 68

   24 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 24 (identdecl)


State 69

   36 vardecl: identdecl '=' . expr ';'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 102
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 70

   17 function: identdecl '(' . ')' ';'
   18         | identdecl '(' . ')' block
   21 funcp: '(' . identdecl

    TOK_VOID    shift, and go to state 4
    TOK_BOOL    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 103
    ')'         shift, and go to state 104

    basetype   go to state 30
    identdecl  go to state 105


State 71

   19 function: identdecl funcp . ')' block
   20         | identdecl funcp . ')' ';'
   22 funcp: funcp . ',' identdecl

    ')'  shift, and go to state 106
    ','  shift, and go to state 107


State 72

   26 block: blkstmts '}' .

    $default  reduce using rule 26 (block)


State 73

   29 blkstmts: blkstmts statement .

    $default  reduce using rule 29 (blkstmts)


State 74

   48 expr: expr TOK_EQ . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 108
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 75

   49 expr: expr TOK_NE . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 109
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 76

   50 expr: expr TOK_LT . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 110
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 77

   51 expr: expr TOK_LE . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 111
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 78

   52 expr: expr TOK_GT . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 112
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 79

   53 expr: expr TOK_GE . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 113
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 80

   47 expr: expr '=' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 114
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 81

   54 expr: expr '+' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 115
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 82

   55 expr: expr '-' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 116
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 83

   56 expr: expr '*' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 117
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 84

   57 expr: expr '/' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 118
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 85

   58 expr: expr '%' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 119
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 86

   72 variable: expr '[' . expr ']'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 120
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 87

   73 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 121


State 88

   35 statement: expr ';' .

    $default  reduce using rule 35 (statement)


State 89

   68 call: arg ')' .

    $default  reduce using rule 68 (call)


State 90

   70 arg: arg ',' . expr

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 122
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 91

   38 ifelse: TOK_IF '(' expr . ')' statement
   39       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LT  shift, and go to state 76
    TOK_LE  shift, and go to state 77
    TOK_GT  shift, and go to state 78
    TOK_GE  shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ')'     shift, and go to state 123


State 92

   37 while: TOK_WHILE '(' expr . ')' statement
   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LT  shift, and go to state 76
    TOK_LE  shift, and go to state 77
    TOK_GT  shift, and go to state 78
    TOK_GE  shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ')'     shift, and go to state 124


State 93

   40 return: TOK_RETURN expr ';' .

    $default  reduce using rule 40 (return)


State 94

    8 structdef: TOK_STRUCT TOK_IDENT '{' . '}' @1 declarations '}'

    '}'  shift, and go to state 125


State 95

   65 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 126
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 96

   64 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 127


State 97

   66 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 50
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26

    expr       go to state 128
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 98

   67 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 67 (call)


State 99

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   69 arg: TOK_IDENT '(' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LT  shift, and go to state 76
    TOK_LE  shift, and go to state 77
    TOK_GT  shift, and go to state 78
    TOK_GE  shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87

    $default  reduce using rule 69 (arg)


State 100

   44 expr: '(' expr ')' .

    $default  reduce using rule 44 (expr)


State 101

   23 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 23 (identdecl)


State 102

   36 vardecl: identdecl '=' expr . ';'
   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LT  shift, and go to state 76
    TOK_LE  shift, and go to state 77
    TOK_GT  shift, and go to state 78
    TOK_GE  shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ';'     shift, and go to state 129


State 103

   16 basetype: TOK_IDENT .

    $default  reduce using rule 16 (basetype)


State 104

   17 function: identdecl '(' ')' . ';'
   18         | identdecl '(' ')' . block

    ';'  shift, and go to state 130
    '{'  shift, and go to state 28

    block     go to state 131
    blkstmts  go to state 34


State 105

   21 funcp: '(' identdecl .

    $default  reduce using rule 21 (funcp)


State 106

   19 function: identdecl funcp ')' . block
   20         | identdecl funcp ')' . ';'

    ';'  shift, and go to state 132
    '{'  shift, and go to state 28

    block     go to state 133
    blkstmts  go to state 34


State 107

   22 funcp: funcp ',' . identdecl

    TOK_VOID    shift, and go to state 4
    TOK_BOOL    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 103

    basetype   go to state 30
    identdecl  go to state 134


State 108

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   48     | expr TOK_EQ expr .
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85
    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 48 (expr)


State 109

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   49     | expr TOK_NE expr .
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85
    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 49 (expr)


State 110

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   50     | expr TOK_LT expr .
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85
    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 50 (expr)


State 111

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   51     | expr TOK_LE expr .
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85
    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 51 (expr)


State 112

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   52     | expr TOK_GT expr .
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85
    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 52 (expr)


State 113

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   53     | expr TOK_GE expr .
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85
    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 53 (expr)


State 114

   47 expr: expr . '=' expr
   47     | expr '=' expr .
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LT  shift, and go to state 76
    TOK_LE  shift, and go to state 77
    TOK_GT  shift, and go to state 78
    TOK_GE  shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87

    $default  reduce using rule 47 (expr)


State 115

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   54     | expr '+' expr .
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85
    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 54 (expr)


State 116

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   55     | expr '-' expr .
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    '%'  shift, and go to state 85
    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 55 (expr)


State 117

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   56     | expr '*' expr .
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 56 (expr)


State 118

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   57     | expr '/' expr .
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 57 (expr)


State 119

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   58     | expr '%' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '['  shift, and go to state 86
    '.'  shift, and go to state 87

    $default  reduce using rule 58 (expr)


State 120

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   72         | expr '[' expr . ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LT  shift, and go to state 76
    TOK_LE  shift, and go to state 77
    TOK_GT  shift, and go to state 78
    TOK_GE  shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ']'     shift, and go to state 135


State 121

   73 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 73 (variable)


State 122

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   70 arg: arg ',' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LT  shift, and go to state 76
    TOK_LE  shift, and go to state 77
    TOK_GT  shift, and go to state 78
    TOK_GE  shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87

    $default  reduce using rule 70 (arg)


State 123

   38 ifelse: TOK_IF '(' expr ')' . statement
   39       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 30
    identdecl  go to state 65
    block      go to state 33
    blkstmts   go to state 34
    statement  go to state 136
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 124

   37 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 30
    identdecl  go to state 65
    block      go to state 33
    blkstmts   go to state 34
    statement  go to state 137
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 125

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' . @1 declarations '}'

    $default  reduce using rule 7 (@1)

    @1  go to state 138


State 126

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   65 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LT  shift, and go to state 76
    TOK_LE  shift, and go to state 77
    TOK_GT  shift, and go to state 78
    TOK_GE  shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ')'     shift, and go to state 139


State 127

   64 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 64 (allocator)


State 128

   47 expr: expr . '=' expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | expr . TOK_LT expr
   51     | expr . TOK_LE expr
   52     | expr . TOK_GT expr
   53     | expr . TOK_GE expr
   54     | expr . '+' expr
   55     | expr . '-' expr
   56     | expr . '*' expr
   57     | expr . '/' expr
   58     | expr . '%' expr
   66 allocator: TOK_NEW basetype '[' expr . ']'
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 74
    TOK_NE  shift, and go to state 75
    TOK_LT  shift, and go to state 76
    TOK_LE  shift, and go to state 77
    TOK_GT  shift, and go to state 78
    TOK_GE  shift, and go to state 79
    '='     shift, and go to state 80
    '+'     shift, and go to state 81
    '-'     shift, and go to state 82
    '*'     shift, and go to state 83
    '/'     shift, and go to state 84
    '%'     shift, and go to state 85
    '['     shift, and go to state 86
    '.'     shift, and go to state 87
    ']'     shift, and go to state 140


State 129

   36 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 36 (vardecl)


State 130

   17 function: identdecl '(' ')' ';' .
   27 block: ';' .

    $end           reduce using rule 17 (function)
    $end           [reduce using rule 27 (block)]
    error          reduce using rule 17 (function)
    error          [reduce using rule 27 (block)]
    TOK_VOID       reduce using rule 17 (function)
    TOK_VOID       [reduce using rule 27 (block)]
    TOK_BOOL       reduce using rule 17 (function)
    TOK_BOOL       [reduce using rule 27 (block)]
    TOK_CHAR       reduce using rule 17 (function)
    TOK_CHAR       [reduce using rule 27 (block)]
    TOK_INT        reduce using rule 17 (function)
    TOK_INT        [reduce using rule 27 (block)]
    TOK_STRING     reduce using rule 17 (function)
    TOK_STRING     [reduce using rule 27 (block)]
    TOK_IF         reduce using rule 17 (function)
    TOK_IF         [reduce using rule 27 (block)]
    TOK_WHILE      reduce using rule 17 (function)
    TOK_WHILE      [reduce using rule 27 (block)]
    TOK_RETURN     reduce using rule 17 (function)
    TOK_RETURN     [reduce using rule 27 (block)]
    TOK_STRUCT     reduce using rule 17 (function)
    TOK_STRUCT     [reduce using rule 27 (block)]
    TOK_FALSE      reduce using rule 17 (function)
    TOK_FALSE      [reduce using rule 27 (block)]
    TOK_TRUE       reduce using rule 17 (function)
    TOK_TRUE       [reduce using rule 27 (block)]
    TOK_NULL       reduce using rule 17 (function)
    TOK_NULL       [reduce using rule 27 (block)]
    TOK_NEW        reduce using rule 17 (function)
    TOK_NEW        [reduce using rule 27 (block)]
    TOK_IDENT      reduce using rule 17 (function)
    TOK_IDENT      [reduce using rule 27 (block)]
    TOK_INTCON     reduce using rule 17 (function)
    TOK_INTCON     [reduce using rule 27 (block)]
    TOK_CHARCON    reduce using rule 17 (function)
    TOK_CHARCON    [reduce using rule 27 (block)]
    TOK_STRINGCON  reduce using rule 17 (function)
    TOK_STRINGCON  [reduce using rule 27 (block)]
    TOK_ORD        reduce using rule 17 (function)
    TOK_ORD        [reduce using rule 27 (block)]
    TOK_CHR        reduce using rule 17 (function)
    TOK_CHR        [reduce using rule 27 (block)]
    '+'            reduce using rule 17 (function)
    '+'            [reduce using rule 27 (block)]
    '-'            reduce using rule 17 (function)
    '-'            [reduce using rule 27 (block)]
    '!'            reduce using rule 17 (function)
    '!'            [reduce using rule 27 (block)]
    '('            reduce using rule 17 (function)
    '('            [reduce using rule 27 (block)]
    ';'            reduce using rule 17 (function)
    ';'            [reduce using rule 27 (block)]
    '{'            reduce using rule 17 (function)
    '{'            [reduce using rule 27 (block)]
    $default       reduce using rule 17 (function)


State 131

   18 function: identdecl '(' ')' block .

    $default  reduce using rule 18 (function)


State 132

   20 function: identdecl funcp ')' ';' .
   27 block: ';' .

    $end           reduce using rule 20 (function)
    $end           [reduce using rule 27 (block)]
    error          reduce using rule 20 (function)
    error          [reduce using rule 27 (block)]
    TOK_VOID       reduce using rule 20 (function)
    TOK_VOID       [reduce using rule 27 (block)]
    TOK_BOOL       reduce using rule 20 (function)
    TOK_BOOL       [reduce using rule 27 (block)]
    TOK_CHAR       reduce using rule 20 (function)
    TOK_CHAR       [reduce using rule 27 (block)]
    TOK_INT        reduce using rule 20 (function)
    TOK_INT        [reduce using rule 27 (block)]
    TOK_STRING     reduce using rule 20 (function)
    TOK_STRING     [reduce using rule 27 (block)]
    TOK_IF         reduce using rule 20 (function)
    TOK_IF         [reduce using rule 27 (block)]
    TOK_WHILE      reduce using rule 20 (function)
    TOK_WHILE      [reduce using rule 27 (block)]
    TOK_RETURN     reduce using rule 20 (function)
    TOK_RETURN     [reduce using rule 27 (block)]
    TOK_STRUCT     reduce using rule 20 (function)
    TOK_STRUCT     [reduce using rule 27 (block)]
    TOK_FALSE      reduce using rule 20 (function)
    TOK_FALSE      [reduce using rule 27 (block)]
    TOK_TRUE       reduce using rule 20 (function)
    TOK_TRUE       [reduce using rule 27 (block)]
    TOK_NULL       reduce using rule 20 (function)
    TOK_NULL       [reduce using rule 27 (block)]
    TOK_NEW        reduce using rule 20 (function)
    TOK_NEW        [reduce using rule 27 (block)]
    TOK_IDENT      reduce using rule 20 (function)
    TOK_IDENT      [reduce using rule 27 (block)]
    TOK_INTCON     reduce using rule 20 (function)
    TOK_INTCON     [reduce using rule 27 (block)]
    TOK_CHARCON    reduce using rule 20 (function)
    TOK_CHARCON    [reduce using rule 27 (block)]
    TOK_STRINGCON  reduce using rule 20 (function)
    TOK_STRINGCON  [reduce using rule 27 (block)]
    TOK_ORD        reduce using rule 20 (function)
    TOK_ORD        [reduce using rule 27 (block)]
    TOK_CHR        reduce using rule 20 (function)
    TOK_CHR        [reduce using rule 27 (block)]
    '+'            reduce using rule 20 (function)
    '+'            [reduce using rule 27 (block)]
    '-'            reduce using rule 20 (function)
    '-'            [reduce using rule 27 (block)]
    '!'            reduce using rule 20 (function)
    '!'            [reduce using rule 27 (block)]
    '('            reduce using rule 20 (function)
    '('            [reduce using rule 27 (block)]
    ';'            reduce using rule 20 (function)
    ';'            [reduce using rule 27 (block)]
    '{'            reduce using rule 20 (function)
    '{'            [reduce using rule 27 (block)]
    $default       reduce using rule 20 (function)


State 133

   19 function: identdecl funcp ')' block .

    $default  reduce using rule 19 (function)


State 134

   22 funcp: funcp ',' identdecl .

    $default  reduce using rule 22 (funcp)


State 135

   72 variable: expr '[' expr ']' .

    $default  reduce using rule 72 (variable)


State 136

   38 ifelse: TOK_IF '(' expr ')' statement .
   39       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 141

    $default  reduce using rule 38 (ifelse)


State 137

   37 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 37 (while)


State 138

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' @1 . declarations '}'

    TOK_STRUCT  shift, and go to state 142

    declarations  go to state 143


State 139

   65 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 65 (allocator)


State 140

   66 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 66 (allocator)


State 141

   39 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 4
    TOK_BOOL       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_FALSE      shift, and go to state 13
    TOK_TRUE       shift, and go to state 14
    TOK_NULL       shift, and go to state 15
    TOK_NEW        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    TOK_ORD        shift, and go to state 21
    TOK_CHR        shift, and go to state 22
    '+'            shift, and go to state 23
    '-'            shift, and go to state 24
    '!'            shift, and go to state 25
    '('            shift, and go to state 26
    ';'            shift, and go to state 27
    '{'            shift, and go to state 28

    basetype   go to state 30
    identdecl  go to state 65
    block      go to state 33
    blkstmts   go to state 34
    statement  go to state 144
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    allocator  go to state 41
    call       go to state 42
    arg        go to state 43
    variable   go to state 44
    constant   go to state 45


State 142

    9 declarations: TOK_STRUCT . TOK_IDENT '{' identdecl ';'

    TOK_IDENT  shift, and go to state 145


State 143

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' @1 declarations . '}'
   10 declarations: declarations . identdecl ';'

    TOK_VOID    shift, and go to state 4
    TOK_BOOL    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 103
    '}'         shift, and go to state 146

    basetype   go to state 30
    identdecl  go to state 147


State 144

   39 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 39 (ifelse)


State 145

    9 declarations: TOK_STRUCT TOK_IDENT . '{' identdecl ';'

    '{'  shift, and go to state 148


State 146

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' @1 declarations '}' .

    $default  reduce using rule 8 (structdef)


State 147

   10 declarations: declarations identdecl . ';'

    ';'  shift, and go to state 149


State 148

    9 declarations: TOK_STRUCT TOK_IDENT '{' . identdecl ';'

    TOK_VOID    shift, and go to state 4
    TOK_BOOL    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 103

    basetype   go to state 30
    identdecl  go to state 150


State 149

   10 declarations: declarations identdecl ';' .

    $default  reduce using rule 10 (declarations)


State 150

    9 declarations: TOK_STRUCT TOK_IDENT '{' identdecl . ';'

    ';'  shift, and go to state 151


State 151

    9 declarations: TOK_STRUCT TOK_IDENT '{' identdecl ';' .

    $default  reduce using rule 9 (declarations)
